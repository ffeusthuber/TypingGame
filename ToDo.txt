DB --> Adapter --> Port (Domain)

TextFile with words --> populateWordlist --> fill List in domain.StringSelectorImpl



Open Tasks:

[X] select random Words from a repository (based on numbers)
    [X] specific word gets returned
    [X] error gets thrown, when number is not in allowed range

[ ] Spawn new word that has to be typed in a given interval

[ ] Delete words when typed

[ ] Game over when no lives left

Game Objects:
+ Player
    - Lives
+ Playing field (rename)
    - Boundaries
    - spawn-positions
+ domain.WordSpawner
    - spawn-interval
    - spawn-positions
    - RandomNumberGenerator (to select random Spawn position)
    - domain.StringSelectorImpl
        * List<String> filled by adapter.in.WordRepository
        * RandomNumberGenerator (to select random word)
+ Words
    - word
    - remaining word
    - position on field
    - speed
        *   min-speed (set in config?)
        *   max-speed (set in config?)
+ GameMenu

- when start-button is pushed game starts
- when game is started player has 3 lives
- when game is started, wordSpawner starts spawning random words
- words get assigned a speed between min and max
- when game is started, inputManager takes input
- wordSpawner interval gets shorter over time
- when game is started timer starts running
- when first letter of word is typed, word is targeted
    - with multiple words that start with same letter the one closest to game over gets targeted
- when word is targeted and first letter of other word is typed, target is not changed
- when correct letter of targeted words remaining word is typed, remaining word is reduced
- when all letters of remaining word are typed, word is marked as typed and set invisible / deleted
- when a word reaches the lower game-field boundary a life gets taken from player
- when the player has no lives left, game is over
- when game is over menu gets displayed


process:
- type letter
- word targeter checks if word is targeted
	- if targeted get input to word
		-check if letter is correct
			-if correct reduce word
	- if none targeted target word closest to game over

- input manager
	- gets input
	- sends input out
	- words are listeners (when targeted they use the input)

- word targeter
	- sets targeted state in word

- word generator
	- generate random words


Ressources:
JavaFX Typing Game Almas Baimagambetov Youtube
Test-Driven development in java fx with test fx Medium
JavaFx-Komponenten mit TestFX testen Entwickler.de
